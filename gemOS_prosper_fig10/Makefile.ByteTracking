all: gemOS.kernel
SRCS = main.c lib.c idt.c kbd.c shell.c serial.c memory.c context.c entry.c apic.c schedule.c mmap.c cfork.c page.c fs.c file.c pipe.c msr.c dirty.c checkpoint.c list.c nonvolatile.c
OBJS = boot.o main.o lib.o idt.o kbd.o shell.o serial.o memory.o context.o entry.o apic.o schedule.o mmap.o cfork.o page.o  fs.o file.o pipe.o msr.o dirty.o checkpoint.o list.o nonvolatile.o
CFLAGS  = -g -nostdlib -nostdinc -fno-builtin -fno-stack-protector -fpic -m64 -I./include -I../include $(TRACKER_FLAGS)
LDFLAGS = -nostdlib -nodefaultlibs  -q -melf_x86_64 -Tlink64.ld
ASFLAGS = --64  
AS = as 
USER_CFLAGS  = -nostdlib -nostdinc -fno-builtin -fno-stack-protector -fpic -m64 -I./user/


%o: %c
	gcc -c $(CFLAGS) $< -o $@ 

boot.o : boot_64.S
	$(AS) $(ASFLAGS) $^ -o $@


user/lib.o:user/lib.c user/ulib.h
	gcc -c $(USER_CFLAGS) user/lib.c -o user/lib.o
user/init.o:user/init.c user/ulib.h
	gcc -c $(USER_CFLAGS) user/init.c -o user/init.o

gemOS.kernel: $(OBJS) user/init.o user/lib.o
	ld $(LDFLAGS) -o $@ $(OBJS) user/init.o user/lib.o

.Phony: clean
clean:
	rm -f *.o; rm -f gemOS.kernel; rm -f user/*.o;
